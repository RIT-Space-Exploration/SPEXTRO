/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.1 */

#ifndef PB_SPEXTRO_TELEMETRY_PB_H_INCLUDED
#define PB_SPEXTRO_TELEMETRY_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _spextro_CommandType {
    spextro_CommandType_ARM_PAYLOAD = 0,
    spextro_CommandType_DISARM_PAYLOAD = 1,
    spextro_CommandType_SOLENOID_OPEN = 2,
    spextro_CommandType_SOLENOID_CLOSE = 3
} spextro_CommandType;

typedef enum _spextro_Telemetry_SystemPhase_FlightPhase {
    spextro_Telemetry_SystemPhase_FlightPhase_STANDBY = 0,
    spextro_Telemetry_SystemPhase_FlightPhase_LAUNCH_READY = 1,
    spextro_Telemetry_SystemPhase_FlightPhase_LAUNCHED = 2,
    spextro_Telemetry_SystemPhase_FlightPhase_PAYLOAD_DEPLOYED = 3,
    spextro_Telemetry_SystemPhase_FlightPhase_PARACHUTE_DEPLOYED = 4,
    spextro_Telemetry_SystemPhase_FlightPhase_RECOVERY = 5
} spextro_Telemetry_SystemPhase_FlightPhase;

typedef enum _spextro_Telemetry_DeploymentSwitchERROR_SwitchUnit {
    spextro_Telemetry_DeploymentSwitchERROR_SwitchUnit_UNIT_1 = 0,
    spextro_Telemetry_DeploymentSwitchERROR_SwitchUnit_UNIT_2 = 1,
    spextro_Telemetry_DeploymentSwitchERROR_SwitchUnit_UNIT_3 = 2,
    spextro_Telemetry_DeploymentSwitchERROR_SwitchUnit_UNIT_4 = 3
} spextro_Telemetry_DeploymentSwitchERROR_SwitchUnit;

typedef enum _spextro_Telemetry_PowerERROR_PowerUnit {
    spextro_Telemetry_PowerERROR_PowerUnit_UNIT_1 = 0,
    spextro_Telemetry_PowerERROR_PowerUnit_UNIT_2 = 1
} spextro_Telemetry_PowerERROR_PowerUnit;

typedef enum _spextro_Telemetry_HardwareERROR_HardwareUnit {
    spextro_Telemetry_HardwareERROR_HardwareUnit_XBEE_TRANSCEIVER = 0,
    spextro_Telemetry_HardwareERROR_HardwareUnit_BOSCH_BNO055_IMU = 1,
    spextro_Telemetry_HardwareERROR_HardwareUnit_BOSCH_BME680 = 2,
    spextro_Telemetry_HardwareERROR_HardwareUnit_UBLOX_MAX_M8Q = 3,
    spextro_Telemetry_HardwareERROR_HardwareUnit_SD_CARD = 4
} spextro_Telemetry_HardwareERROR_HardwareUnit;

/* Struct definitions */
typedef struct _spextro_Command {
    spextro_CommandType type;
} spextro_Command;

typedef struct _spextro_Quaternion {
    int32_t a_comp;
    int32_t b_comp;
    int32_t c_comp;
    int32_t d_comp;
} spextro_Quaternion;

typedef struct _spextro_SensorLog_PollTime {
    uint32_t sent_time_s;
} spextro_SensorLog_PollTime;

typedef struct _spextro_SensorLog_StratoLoggerCF {
    float altitude_m;
} spextro_SensorLog_StratoLoggerCF;

typedef struct _spextro_Telemetry_Acceleration {
    int32_t accel_x;
    int32_t accel_y;
    int32_t accel_z;
} spextro_Telemetry_Acceleration;

typedef struct _spextro_Telemetry_Altitude {
    float altitude_from_sea_level_m;
    float relative_attitude_m;
} spextro_Telemetry_Altitude;

typedef struct _spextro_Telemetry_DeploymentSwitchERROR {
    spextro_Telemetry_DeploymentSwitchERROR_SwitchUnit unit;
    bool switch_status;
} spextro_Telemetry_DeploymentSwitchERROR;

typedef struct _spextro_Telemetry_Environmental {
    int32_t temperature_degC;
    uint32_t pressure;
    uint32_t humidity;
} spextro_Telemetry_Environmental;

typedef struct _spextro_Telemetry_GPSPosition {
    float latitude;
    float longitude;
} spextro_Telemetry_GPSPosition;

typedef struct _spextro_Telemetry_HardwareERROR {
    spextro_Telemetry_HardwareERROR_HardwareUnit unit;
} spextro_Telemetry_HardwareERROR;

typedef struct _spextro_Telemetry_Header {
    uint32_t sent_time_s;
} spextro_Telemetry_Header;

typedef struct _spextro_Telemetry_PowerERROR {
    spextro_Telemetry_PowerERROR_PowerUnit unit;
} spextro_Telemetry_PowerERROR;

typedef struct _spextro_Telemetry_SciencePayload {
    pb_callback_t data;
    uint32_t time_start;
    uint32_t time_end;
} spextro_Telemetry_SciencePayload;

typedef struct _spextro_Telemetry_StorageERROR {
    bool failed;
} spextro_Telemetry_StorageERROR;

typedef struct _spextro_Telemetry_SystemHealth {
    uint32_t battery_voltage_1;
    uint32_t battery_voltage_2;
} spextro_Telemetry_SystemHealth;

typedef struct _spextro_Telemetry_SystemPhase {
    spextro_Telemetry_SystemPhase_FlightPhase phase;
} spextro_Telemetry_SystemPhase;

typedef struct _spextro_SensorLog_BNO055 {
    int32_t accel_x;
    int32_t accel_y;
    int32_t accel_z;
    bool has_quaternion_orentation;
    spextro_Quaternion quaternion_orentation;
} spextro_SensorLog_BNO055;

typedef struct _spextro_Telemetry_CommandStatus {
    bool has_type;
    spextro_Command type;
    bool was_success;
} spextro_Telemetry_CommandStatus;

typedef struct _spextro_Telemetry_Orientation {
    bool has_quaternion;
    spextro_Quaternion quaternion;
} spextro_Telemetry_Orientation;

typedef struct _spextro_SensorLog {
    bool has_poll_time;
    spextro_SensorLog_PollTime poll_time;
    pb_size_t which_data;
    union {
        spextro_SensorLog_BNO055 bno055;
        spextro_SensorLog_StratoLoggerCF stratologgerCF;
    } data;
} spextro_SensorLog;

typedef struct _spextro_Telemetry {
    bool has_header;
    spextro_Telemetry_Header header;
    pb_size_t which_data;
    union {
        spextro_Telemetry_Altitude altitude;
        spextro_Telemetry_Orientation orientation;
        spextro_Telemetry_SciencePayload science_payload;
        spextro_Telemetry_Environmental environmental;
        spextro_Telemetry_GPSPosition position;
        spextro_Telemetry_Acceleration accel;
        spextro_Telemetry_SystemPhase system_phase;
        spextro_Telemetry_CommandStatus cmd_status;
        spextro_Telemetry_DeploymentSwitchERROR switch_error;
        spextro_Telemetry_PowerERROR power_error;
        spextro_Telemetry_StorageERROR storage_error;
        spextro_Telemetry_HardwareERROR hardware_error;
    } data;
} spextro_Telemetry;


/* Helper constants for enums */
#define _spextro_CommandType_MIN spextro_CommandType_ARM_PAYLOAD
#define _spextro_CommandType_MAX spextro_CommandType_SOLENOID_CLOSE
#define _spextro_CommandType_ARRAYSIZE ((spextro_CommandType)(spextro_CommandType_SOLENOID_CLOSE+1))

#define _spextro_Telemetry_SystemPhase_FlightPhase_MIN spextro_Telemetry_SystemPhase_FlightPhase_STANDBY
#define _spextro_Telemetry_SystemPhase_FlightPhase_MAX spextro_Telemetry_SystemPhase_FlightPhase_RECOVERY
#define _spextro_Telemetry_SystemPhase_FlightPhase_ARRAYSIZE ((spextro_Telemetry_SystemPhase_FlightPhase)(spextro_Telemetry_SystemPhase_FlightPhase_RECOVERY+1))

#define _spextro_Telemetry_DeploymentSwitchERROR_SwitchUnit_MIN spextro_Telemetry_DeploymentSwitchERROR_SwitchUnit_UNIT_1
#define _spextro_Telemetry_DeploymentSwitchERROR_SwitchUnit_MAX spextro_Telemetry_DeploymentSwitchERROR_SwitchUnit_UNIT_4
#define _spextro_Telemetry_DeploymentSwitchERROR_SwitchUnit_ARRAYSIZE ((spextro_Telemetry_DeploymentSwitchERROR_SwitchUnit)(spextro_Telemetry_DeploymentSwitchERROR_SwitchUnit_UNIT_4+1))

#define _spextro_Telemetry_PowerERROR_PowerUnit_MIN spextro_Telemetry_PowerERROR_PowerUnit_UNIT_1
#define _spextro_Telemetry_PowerERROR_PowerUnit_MAX spextro_Telemetry_PowerERROR_PowerUnit_UNIT_2
#define _spextro_Telemetry_PowerERROR_PowerUnit_ARRAYSIZE ((spextro_Telemetry_PowerERROR_PowerUnit)(spextro_Telemetry_PowerERROR_PowerUnit_UNIT_2+1))

#define _spextro_Telemetry_HardwareERROR_HardwareUnit_MIN spextro_Telemetry_HardwareERROR_HardwareUnit_XBEE_TRANSCEIVER
#define _spextro_Telemetry_HardwareERROR_HardwareUnit_MAX spextro_Telemetry_HardwareERROR_HardwareUnit_SD_CARD
#define _spextro_Telemetry_HardwareERROR_HardwareUnit_ARRAYSIZE ((spextro_Telemetry_HardwareERROR_HardwareUnit)(spextro_Telemetry_HardwareERROR_HardwareUnit_SD_CARD+1))


/* Initializer values for message structs */
#define spextro_Quaternion_init_default          {0, 0, 0, 0}
#define spextro_Telemetry_init_default           {false, spextro_Telemetry_Header_init_default, 0, {spextro_Telemetry_Altitude_init_default}}
#define spextro_Telemetry_Header_init_default    {0}
#define spextro_Telemetry_Altitude_init_default  {0, 0}
#define spextro_Telemetry_Environmental_init_default {0, 0, 0}
#define spextro_Telemetry_Orientation_init_default {false, spextro_Quaternion_init_default}
#define spextro_Telemetry_GPSPosition_init_default {0, 0}
#define spextro_Telemetry_SciencePayload_init_default {{{NULL}, NULL}, 0, 0}
#define spextro_Telemetry_Acceleration_init_default {0, 0, 0}
#define spextro_Telemetry_SystemHealth_init_default {0, 0}
#define spextro_Telemetry_SystemPhase_init_default {_spextro_Telemetry_SystemPhase_FlightPhase_MIN}
#define spextro_Telemetry_CommandStatus_init_default {false, spextro_Command_init_default, 0}
#define spextro_Telemetry_DeploymentSwitchERROR_init_default {_spextro_Telemetry_DeploymentSwitchERROR_SwitchUnit_MIN, 0}
#define spextro_Telemetry_PowerERROR_init_default {_spextro_Telemetry_PowerERROR_PowerUnit_MIN}
#define spextro_Telemetry_StorageERROR_init_default {0}
#define spextro_Telemetry_HardwareERROR_init_default {_spextro_Telemetry_HardwareERROR_HardwareUnit_MIN}
#define spextro_Command_init_default             {_spextro_CommandType_MIN}
#define spextro_SensorLog_init_default           {false, spextro_SensorLog_PollTime_init_default, 0, {spextro_SensorLog_BNO055_init_default}}
#define spextro_SensorLog_PollTime_init_default  {0}
#define spextro_SensorLog_BNO055_init_default    {0, 0, 0, false, spextro_Quaternion_init_default}
#define spextro_SensorLog_StratoLoggerCF_init_default {0}
#define spextro_Quaternion_init_zero             {0, 0, 0, 0}
#define spextro_Telemetry_init_zero              {false, spextro_Telemetry_Header_init_zero, 0, {spextro_Telemetry_Altitude_init_zero}}
#define spextro_Telemetry_Header_init_zero       {0}
#define spextro_Telemetry_Altitude_init_zero     {0, 0}
#define spextro_Telemetry_Environmental_init_zero {0, 0, 0}
#define spextro_Telemetry_Orientation_init_zero  {false, spextro_Quaternion_init_zero}
#define spextro_Telemetry_GPSPosition_init_zero  {0, 0}
#define spextro_Telemetry_SciencePayload_init_zero {{{NULL}, NULL}, 0, 0}
#define spextro_Telemetry_Acceleration_init_zero {0, 0, 0}
#define spextro_Telemetry_SystemHealth_init_zero {0, 0}
#define spextro_Telemetry_SystemPhase_init_zero  {_spextro_Telemetry_SystemPhase_FlightPhase_MIN}
#define spextro_Telemetry_CommandStatus_init_zero {false, spextro_Command_init_zero, 0}
#define spextro_Telemetry_DeploymentSwitchERROR_init_zero {_spextro_Telemetry_DeploymentSwitchERROR_SwitchUnit_MIN, 0}
#define spextro_Telemetry_PowerERROR_init_zero   {_spextro_Telemetry_PowerERROR_PowerUnit_MIN}
#define spextro_Telemetry_StorageERROR_init_zero {0}
#define spextro_Telemetry_HardwareERROR_init_zero {_spextro_Telemetry_HardwareERROR_HardwareUnit_MIN}
#define spextro_Command_init_zero                {_spextro_CommandType_MIN}
#define spextro_SensorLog_init_zero              {false, spextro_SensorLog_PollTime_init_zero, 0, {spextro_SensorLog_BNO055_init_zero}}
#define spextro_SensorLog_PollTime_init_zero     {0}
#define spextro_SensorLog_BNO055_init_zero       {0, 0, 0, false, spextro_Quaternion_init_zero}
#define spextro_SensorLog_StratoLoggerCF_init_zero {0}

/* Field tags (for use in manual encoding/decoding) */
#define spextro_Command_type_tag                 1
#define spextro_Quaternion_a_comp_tag            1
#define spextro_Quaternion_b_comp_tag            2
#define spextro_Quaternion_c_comp_tag            3
#define spextro_Quaternion_d_comp_tag            4
#define spextro_SensorLog_PollTime_sent_time_s_tag 1
#define spextro_SensorLog_StratoLoggerCF_altitude_m_tag 1
#define spextro_Telemetry_Acceleration_accel_x_tag 1
#define spextro_Telemetry_Acceleration_accel_y_tag 2
#define spextro_Telemetry_Acceleration_accel_z_tag 3
#define spextro_Telemetry_Altitude_altitude_from_sea_level_m_tag 1
#define spextro_Telemetry_Altitude_relative_attitude_m_tag 2
#define spextro_Telemetry_DeploymentSwitchERROR_unit_tag 1
#define spextro_Telemetry_DeploymentSwitchERROR_switch_status_tag 2
#define spextro_Telemetry_Environmental_temperature_degC_tag 1
#define spextro_Telemetry_Environmental_pressure_tag 2
#define spextro_Telemetry_Environmental_humidity_tag 3
#define spextro_Telemetry_GPSPosition_latitude_tag 1
#define spextro_Telemetry_GPSPosition_longitude_tag 2
#define spextro_Telemetry_HardwareERROR_unit_tag 1
#define spextro_Telemetry_Header_sent_time_s_tag 1
#define spextro_Telemetry_PowerERROR_unit_tag    1
#define spextro_Telemetry_SciencePayload_data_tag 1
#define spextro_Telemetry_SciencePayload_time_start_tag 2
#define spextro_Telemetry_SciencePayload_time_end_tag 3
#define spextro_Telemetry_StorageERROR_failed_tag 1
#define spextro_Telemetry_SystemHealth_battery_voltage_1_tag 1
#define spextro_Telemetry_SystemHealth_battery_voltage_2_tag 2
#define spextro_Telemetry_SystemPhase_phase_tag  3
#define spextro_SensorLog_BNO055_accel_x_tag     1
#define spextro_SensorLog_BNO055_accel_y_tag     2
#define spextro_SensorLog_BNO055_accel_z_tag     3
#define spextro_SensorLog_BNO055_quaternion_orentation_tag 4
#define spextro_Telemetry_CommandStatus_type_tag 1
#define spextro_Telemetry_CommandStatus_was_success_tag 2
#define spextro_Telemetry_Orientation_quaternion_tag 1
#define spextro_SensorLog_bno055_tag             2
#define spextro_SensorLog_stratologgerCF_tag     3
#define spextro_SensorLog_poll_time_tag          1
#define spextro_Telemetry_altitude_tag           2
#define spextro_Telemetry_orientation_tag        3
#define spextro_Telemetry_science_payload_tag    4
#define spextro_Telemetry_environmental_tag      5
#define spextro_Telemetry_position_tag           6
#define spextro_Telemetry_accel_tag              7
#define spextro_Telemetry_system_phase_tag       8
#define spextro_Telemetry_cmd_status_tag         9
#define spextro_Telemetry_switch_error_tag       10
#define spextro_Telemetry_power_error_tag        11
#define spextro_Telemetry_storage_error_tag      12
#define spextro_Telemetry_hardware_error_tag     13
#define spextro_Telemetry_header_tag             1

/* Struct field encoding specification for nanopb */
#define spextro_Quaternion_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    a_comp,            1) \
X(a, STATIC,   SINGULAR, INT32,    b_comp,            2) \
X(a, STATIC,   SINGULAR, INT32,    c_comp,            3) \
X(a, STATIC,   SINGULAR, INT32,    d_comp,            4)
#define spextro_Quaternion_CALLBACK NULL
#define spextro_Quaternion_DEFAULT NULL

#define spextro_Telemetry_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  header,            1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,altitude,data.altitude),   2) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,orientation,data.orientation),   3) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,science_payload,data.science_payload),   4) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,environmental,data.environmental),   5) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,position,data.position),   6) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,accel,data.accel),   7) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,system_phase,data.system_phase),   8) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,cmd_status,data.cmd_status),   9) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,switch_error,data.switch_error),  10) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,power_error,data.power_error),  11) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,storage_error,data.storage_error),  12) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,hardware_error,data.hardware_error),  13)
#define spextro_Telemetry_CALLBACK NULL
#define spextro_Telemetry_DEFAULT NULL
#define spextro_Telemetry_header_MSGTYPE spextro_Telemetry_Header
#define spextro_Telemetry_data_altitude_MSGTYPE spextro_Telemetry_Altitude
#define spextro_Telemetry_data_orientation_MSGTYPE spextro_Telemetry_Orientation
#define spextro_Telemetry_data_science_payload_MSGTYPE spextro_Telemetry_SciencePayload
#define spextro_Telemetry_data_environmental_MSGTYPE spextro_Telemetry_Environmental
#define spextro_Telemetry_data_position_MSGTYPE spextro_Telemetry_GPSPosition
#define spextro_Telemetry_data_accel_MSGTYPE spextro_Telemetry_Acceleration
#define spextro_Telemetry_data_system_phase_MSGTYPE spextro_Telemetry_SystemPhase
#define spextro_Telemetry_data_cmd_status_MSGTYPE spextro_Telemetry_CommandStatus
#define spextro_Telemetry_data_switch_error_MSGTYPE spextro_Telemetry_DeploymentSwitchERROR
#define spextro_Telemetry_data_power_error_MSGTYPE spextro_Telemetry_PowerERROR
#define spextro_Telemetry_data_storage_error_MSGTYPE spextro_Telemetry_StorageERROR
#define spextro_Telemetry_data_hardware_error_MSGTYPE spextro_Telemetry_HardwareERROR

#define spextro_Telemetry_Header_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   sent_time_s,       1)
#define spextro_Telemetry_Header_CALLBACK NULL
#define spextro_Telemetry_Header_DEFAULT NULL

#define spextro_Telemetry_Altitude_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, FLOAT,    altitude_from_sea_level_m,   1) \
X(a, STATIC,   SINGULAR, FLOAT,    relative_attitude_m,   2)
#define spextro_Telemetry_Altitude_CALLBACK NULL
#define spextro_Telemetry_Altitude_DEFAULT NULL

#define spextro_Telemetry_Environmental_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    temperature_degC,   1) \
X(a, STATIC,   SINGULAR, UINT32,   pressure,          2) \
X(a, STATIC,   SINGULAR, UINT32,   humidity,          3)
#define spextro_Telemetry_Environmental_CALLBACK NULL
#define spextro_Telemetry_Environmental_DEFAULT NULL

#define spextro_Telemetry_Orientation_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  quaternion,        1)
#define spextro_Telemetry_Orientation_CALLBACK NULL
#define spextro_Telemetry_Orientation_DEFAULT NULL
#define spextro_Telemetry_Orientation_quaternion_MSGTYPE spextro_Quaternion

#define spextro_Telemetry_GPSPosition_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, FLOAT,    latitude,          1) \
X(a, STATIC,   SINGULAR, FLOAT,    longitude,         2)
#define spextro_Telemetry_GPSPosition_CALLBACK NULL
#define spextro_Telemetry_GPSPosition_DEFAULT NULL

#define spextro_Telemetry_SciencePayload_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, UINT32,   data,              1) \
X(a, STATIC,   SINGULAR, UINT32,   time_start,        2) \
X(a, STATIC,   SINGULAR, UINT32,   time_end,          3)
#define spextro_Telemetry_SciencePayload_CALLBACK pb_default_field_callback
#define spextro_Telemetry_SciencePayload_DEFAULT NULL

#define spextro_Telemetry_Acceleration_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    accel_x,           1) \
X(a, STATIC,   SINGULAR, INT32,    accel_y,           2) \
X(a, STATIC,   SINGULAR, INT32,    accel_z,           3)
#define spextro_Telemetry_Acceleration_CALLBACK NULL
#define spextro_Telemetry_Acceleration_DEFAULT NULL

#define spextro_Telemetry_SystemHealth_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   battery_voltage_1,   1) \
X(a, STATIC,   SINGULAR, UINT32,   battery_voltage_2,   2)
#define spextro_Telemetry_SystemHealth_CALLBACK NULL
#define spextro_Telemetry_SystemHealth_DEFAULT NULL

#define spextro_Telemetry_SystemPhase_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    phase,             3)
#define spextro_Telemetry_SystemPhase_CALLBACK NULL
#define spextro_Telemetry_SystemPhase_DEFAULT NULL

#define spextro_Telemetry_CommandStatus_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  type,              1) \
X(a, STATIC,   SINGULAR, BOOL,     was_success,       2)
#define spextro_Telemetry_CommandStatus_CALLBACK NULL
#define spextro_Telemetry_CommandStatus_DEFAULT NULL
#define spextro_Telemetry_CommandStatus_type_MSGTYPE spextro_Command

#define spextro_Telemetry_DeploymentSwitchERROR_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    unit,              1) \
X(a, STATIC,   SINGULAR, BOOL,     switch_status,     2)
#define spextro_Telemetry_DeploymentSwitchERROR_CALLBACK NULL
#define spextro_Telemetry_DeploymentSwitchERROR_DEFAULT NULL

#define spextro_Telemetry_PowerERROR_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    unit,              1)
#define spextro_Telemetry_PowerERROR_CALLBACK NULL
#define spextro_Telemetry_PowerERROR_DEFAULT NULL

#define spextro_Telemetry_StorageERROR_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, BOOL,     failed,            1)
#define spextro_Telemetry_StorageERROR_CALLBACK NULL
#define spextro_Telemetry_StorageERROR_DEFAULT NULL

#define spextro_Telemetry_HardwareERROR_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    unit,              1)
#define spextro_Telemetry_HardwareERROR_CALLBACK NULL
#define spextro_Telemetry_HardwareERROR_DEFAULT NULL

#define spextro_Command_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    type,              1)
#define spextro_Command_CALLBACK NULL
#define spextro_Command_DEFAULT NULL

#define spextro_SensorLog_FIELDLIST(X, a) \
X(a, STATIC,   OPTIONAL, MESSAGE,  poll_time,         1) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,bno055,data.bno055),   2) \
X(a, STATIC,   ONEOF,    MESSAGE,  (data,stratologgerCF,data.stratologgerCF),   3)
#define spextro_SensorLog_CALLBACK NULL
#define spextro_SensorLog_DEFAULT NULL
#define spextro_SensorLog_poll_time_MSGTYPE spextro_SensorLog_PollTime
#define spextro_SensorLog_data_bno055_MSGTYPE spextro_SensorLog_BNO055
#define spextro_SensorLog_data_stratologgerCF_MSGTYPE spextro_SensorLog_StratoLoggerCF

#define spextro_SensorLog_PollTime_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   sent_time_s,       1)
#define spextro_SensorLog_PollTime_CALLBACK NULL
#define spextro_SensorLog_PollTime_DEFAULT NULL

#define spextro_SensorLog_BNO055_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, INT32,    accel_x,           1) \
X(a, STATIC,   SINGULAR, INT32,    accel_y,           2) \
X(a, STATIC,   SINGULAR, INT32,    accel_z,           3) \
X(a, STATIC,   OPTIONAL, MESSAGE,  quaternion_orentation,   4)
#define spextro_SensorLog_BNO055_CALLBACK NULL
#define spextro_SensorLog_BNO055_DEFAULT NULL
#define spextro_SensorLog_BNO055_quaternion_orentation_MSGTYPE spextro_Quaternion

#define spextro_SensorLog_StratoLoggerCF_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, FLOAT,    altitude_m,        1)
#define spextro_SensorLog_StratoLoggerCF_CALLBACK NULL
#define spextro_SensorLog_StratoLoggerCF_DEFAULT NULL

extern const pb_msgdesc_t spextro_Quaternion_msg;
extern const pb_msgdesc_t spextro_Telemetry_msg;
extern const pb_msgdesc_t spextro_Telemetry_Header_msg;
extern const pb_msgdesc_t spextro_Telemetry_Altitude_msg;
extern const pb_msgdesc_t spextro_Telemetry_Environmental_msg;
extern const pb_msgdesc_t spextro_Telemetry_Orientation_msg;
extern const pb_msgdesc_t spextro_Telemetry_GPSPosition_msg;
extern const pb_msgdesc_t spextro_Telemetry_SciencePayload_msg;
extern const pb_msgdesc_t spextro_Telemetry_Acceleration_msg;
extern const pb_msgdesc_t spextro_Telemetry_SystemHealth_msg;
extern const pb_msgdesc_t spextro_Telemetry_SystemPhase_msg;
extern const pb_msgdesc_t spextro_Telemetry_CommandStatus_msg;
extern const pb_msgdesc_t spextro_Telemetry_DeploymentSwitchERROR_msg;
extern const pb_msgdesc_t spextro_Telemetry_PowerERROR_msg;
extern const pb_msgdesc_t spextro_Telemetry_StorageERROR_msg;
extern const pb_msgdesc_t spextro_Telemetry_HardwareERROR_msg;
extern const pb_msgdesc_t spextro_Command_msg;
extern const pb_msgdesc_t spextro_SensorLog_msg;
extern const pb_msgdesc_t spextro_SensorLog_PollTime_msg;
extern const pb_msgdesc_t spextro_SensorLog_BNO055_msg;
extern const pb_msgdesc_t spextro_SensorLog_StratoLoggerCF_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define spextro_Quaternion_fields &spextro_Quaternion_msg
#define spextro_Telemetry_fields &spextro_Telemetry_msg
#define spextro_Telemetry_Header_fields &spextro_Telemetry_Header_msg
#define spextro_Telemetry_Altitude_fields &spextro_Telemetry_Altitude_msg
#define spextro_Telemetry_Environmental_fields &spextro_Telemetry_Environmental_msg
#define spextro_Telemetry_Orientation_fields &spextro_Telemetry_Orientation_msg
#define spextro_Telemetry_GPSPosition_fields &spextro_Telemetry_GPSPosition_msg
#define spextro_Telemetry_SciencePayload_fields &spextro_Telemetry_SciencePayload_msg
#define spextro_Telemetry_Acceleration_fields &spextro_Telemetry_Acceleration_msg
#define spextro_Telemetry_SystemHealth_fields &spextro_Telemetry_SystemHealth_msg
#define spextro_Telemetry_SystemPhase_fields &spextro_Telemetry_SystemPhase_msg
#define spextro_Telemetry_CommandStatus_fields &spextro_Telemetry_CommandStatus_msg
#define spextro_Telemetry_DeploymentSwitchERROR_fields &spextro_Telemetry_DeploymentSwitchERROR_msg
#define spextro_Telemetry_PowerERROR_fields &spextro_Telemetry_PowerERROR_msg
#define spextro_Telemetry_StorageERROR_fields &spextro_Telemetry_StorageERROR_msg
#define spextro_Telemetry_HardwareERROR_fields &spextro_Telemetry_HardwareERROR_msg
#define spextro_Command_fields &spextro_Command_msg
#define spextro_SensorLog_fields &spextro_SensorLog_msg
#define spextro_SensorLog_PollTime_fields &spextro_SensorLog_PollTime_msg
#define spextro_SensorLog_BNO055_fields &spextro_SensorLog_BNO055_msg
#define spextro_SensorLog_StratoLoggerCF_fields &spextro_SensorLog_StratoLoggerCF_msg

/* Maximum encoded size of messages (where known) */
#define spextro_Quaternion_size                  44
/* spextro_Telemetry_size depends on runtime parameters */
#define spextro_Telemetry_Header_size            6
#define spextro_Telemetry_Altitude_size          10
#define spextro_Telemetry_Environmental_size     23
#define spextro_Telemetry_Orientation_size       46
#define spextro_Telemetry_GPSPosition_size       10
/* spextro_Telemetry_SciencePayload_size depends on runtime parameters */
#define spextro_Telemetry_Acceleration_size      33
#define spextro_Telemetry_SystemHealth_size      12
#define spextro_Telemetry_SystemPhase_size       2
#define spextro_Telemetry_CommandStatus_size     6
#define spextro_Telemetry_DeploymentSwitchERROR_size 4
#define spextro_Telemetry_PowerERROR_size        2
#define spextro_Telemetry_StorageERROR_size      2
#define spextro_Telemetry_HardwareERROR_size     2
#define spextro_Command_size                     2
#define spextro_SensorLog_size                   89
#define spextro_SensorLog_PollTime_size          6
#define spextro_SensorLog_BNO055_size            79
#define spextro_SensorLog_StratoLoggerCF_size    5

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
