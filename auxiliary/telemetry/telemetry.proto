/* Google Protobuf proto file for SPEXTRO telemetry
 * Orginization: RIT Space 
 * Author: Dylan R. Wagner (drw6528@rit.edu)
 */

syntax = "proto3";

package spextro;

message Telemetry {

    message Header {
        // sent_time is time from system initialization in seconds
        uint32 sent_time_s = 1;
    }

    message Atltitude {
        // Altitude is in meters
        float altitude_from_sea_level_m = 1;
        float relative_atltitude_m = 2;
    }

    message Environmental {
        int32 temperature_degC = 1;
        uint32 pressure = 2;
        uint32 humidity = 3; 
    }

    message Orentation {
        // Quaternion holding absolute orentation
        int32 a = 1;
        int32 b = 2;
        int32 c = 3;
        int32 d = 4;
    }

    message GPSPosition {
        // Using Decimal Degrees
        float latitude = 1;
        float longitude = 2;
        float altitude_m = 3;
    }

    message SciencePayload {
        // data is science sensor samples from time_start to time_end
        repeated uint32 data = 1;
        uint32 time_start = 2;
        uint32 time_end = 3;
    }

    message IMU {
        int32 accel_x = 1;
        int32 accel_y = 2;
        int32 accel_z = 3;
        int32 gyro_x = 4;
        int32 gyro_y = 5;
        int32 gyro_z = 6;
        int32 mag_x = 7;
        int32 mag_y = 8;
        int32 mag_z = 9;
    }

    message DeploymentSwitchERROR {
        enum SwitchUnit {
            UNIT_1 = 0;
            UNIT_2 = 1;
            UNIT_3 = 2;
            UNIT_4 = 3;
        }
        SwitchUnit unit = 1;
        bool switch_status = 2;
    }

    message PowerERROR {
        enum PowerUnit {
            UNIT_1 = 0;
            UNIT_2 = 1;
        }
        PowerUnit unit = 1;
    }

    message StorageERROR {
        // Failed to store data, with functioning storage
        bool failed = 1;
    }

    message HardwareERROR {
        enum HardwareUnit {
            XBEE_TRANSCEIVER = 0;
            BOSCH_BNO055_IMU = 1;
            BOSCH_BME680 = 2;
            UBLOX_MAX_M8Q = 3;
            SD_CARD = 4;
            // TODO add more
        }
        HardwareUnit unit = 1;
    }

    message SystemHealth {
        // Percentage of charge left
        uint32 battery_charge_1 = 1;
        uint32 battery_charge_2 = 2;
        // 0 - unarmed, 1 - armed/flight ready, 2 - unarmed/recovery
        uint32 system_phase = 7;

        bool launch_detected = 8;
        bool deploy_detected = 9;
        bool parachute_deployed = 10;
    }
    
    Header header = 1;
    
    oneof data {
        Altitude altitude = 2;
        Orentation orentation = 3;
        SciencePayload science_payload = 4;
        Environmental environmental = 5;
        GPSPosition position = 6;
        IMU imu = 7;
        // Error messages
        DeploymentSwitchERROR switch_error = 10;
        PowerERROR power_error = 11;
        StorageERROR storage_error = 12;
        HardwareERROR hardware_error = 13;
    }
}